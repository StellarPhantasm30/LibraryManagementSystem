package com.project.library_management_system.models;

import java.util.Date;
import java.util.List;

import org.hibernate.annotations.CreationTimestamp;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.OneToMany;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

/**
 * This class represents an Author in the Library Management System. An Author
 * entity holds information about a writer associated with books in the library.
 * It is a JPA entity class and is used to map the objects with the records of
 * the 'Author' table in the database.
 * 
 * @author Aditya Ravi Raj
 * @version 1.0
 * @since 15-03-2024
 */
@Data
@AllArgsConstructor
@NoArgsConstructor
@Builder
@Entity
public class Author {

	/**
	 * Unique identifier for the Author (auto-generated by the database).
	 */
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private Integer id;

	/**
	 * Name of the Author.
	 */
	private String name;

	/**
	 * Email address of the Author (unique and mandatory).
	 */
	@Column(unique = true, nullable = false)
	private String email;

	/**
	 * Date and time when the Author record was created in the system. It is
	 * automatically set when the Author object is persisted.
	 */
	@CreationTimestamp
	private Date createdOn;

	/**
	 * List of Books written by this Author. This relationship is unidirectional
	 * (one Author can have many Books). Hibernate maps this association using the
	 * "my_author" field in the Book entity.
	 */
	@OneToMany(mappedBy = "myAuthor")
	@JsonIgnoreProperties({ "my_author" })
	private List<Book> bookList;
}
